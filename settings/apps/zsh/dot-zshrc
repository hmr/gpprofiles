# vim: set noet syn=zsh ft=sh ff=unix fenc=utf-8 ts=2 sw=0 : # GPP default modeline for zsh script
# shellcheck shell=bash disable=SC1091,SC2155,SC3010,SC3021,SC3037 source=${ZDOTDIR}

# Part of GPP

# dot-zshrc
# Login: Yes / Interactive: Yes / Non-interactive: No
# - This file is read after .zprofile when zsh invoked as login shell or interactive shell.
# - According to the zsh manual, it is not intended to use both zlogin and zprofile together.
# - This file should contain about interactive shell options like '[un]setopt', history, prompt,
#   zle, completion, etc.

# ORIGIN: 2020-06-22 by hmr

# Uncomment ↓this↓ line when profiling
# zmodload zsh/zprof && zprof

echo "Processing ${UNDERLINE}${GREEN}dot-zshrc${NORMAL}"

# if [[ "$TERM_PROGRAM" == "vscode" ]]; then
#   echo "  VSCode environmant detected. Skip."
#   builtin return
# fi

# 😩😂😅😝
# Compile rc files
for _SELF in "${ZDOTDIR:-${HOME}}/".zshrc "${ZDOTDIR:-${HOME}}/".zshenv "${ZDOTDIR:-${HOME}}/".zprofile "${ZDOTDIR:-${HOME}}/".zlogout "${ZDOTDIR:-${HOME}}/".zcompdump "${ZDOTDIR:-${HOME}}/"dot-zshrc_setopt "${ZDOTDIR:-${HOME}}/"dot-zshrc_zstyle; do
	if [ ! -f ${_SELF}.zwc -o ${_SELF} -nt ${_SELF}.zwc ]; then
		echo "  Compiling ${_SELF}"
		zcompile ${_SELF}
	fi
	unset _SELF
done

# System-wide zshrc
[ -r /usr/local/etc/zshrc ] && source /usr/local/etc/zshrc

# Zsh options
source ${ZDOTDIR:-${HOME}}/dot-zshrc_setopt

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-${HOME}/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-${HOME}/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Zplug settings
# Where is zplug installed?
## Own-install version
if   [ -d "${XDG_CONFIG_HOME}/zplug" ]; then
  export ZPLUG_ROOT="${XDG_CONFIG_HOME}/zplug"
## Homebrew-installed version(x86)
elif [ -d /usr/local/opt/zplug ]; then
  export ZPLUG_ROOT="/usr/local/opt/zplug"
## Homebrew-installed version(Apple Silicon)
elif [ -d /opt/homebrew/opt/zplug ]; then
  export ZPLUG_ROOT="/opt/homebrew/opt/zplug"
## APT-installed version
elif [ -d /usr/share/zplug ]; then
  export ZPLUG_ROOT="${ZDOTDIR:-${HOME}/.config/zsh}/zplug"
## GPP-installed version
elif [ -d ${ZDOTDIR:-${HOME}/.config/zsh}/zplug ]; then
  export ZPLUG_ROOT="${ZDOTDIR:-${HOME}/.config/zsh}/zplug"
fi

# per-user contents directory
export ZPLUG_HOME="${XDG_DATA_HOME:-${HOME}/.local}/zplug"
# Per-user plugin repo directory
if [ -d "${XDG_DATA_HOME:-${HOME}/.local}" ]; then
  export ZPLUG_REPOS="${XDG_DATA_HOME:-${HOME}/.local}/zplug/repos"
fi
# Per-user cache directory
if [ -d "${XDG_CACHE_HOME:-${HOME}/.cache}" ]; then
  export ZPLUG_CACHE_DIR="${XDG_CACHE_HOME:-${HOME}/.cache}/zplug/cache"
fi

# # enhancd settings
# export ENHANCD_DIR=${ZDOTDIR:-~}/enhancd
# export ENHANCD_FILTER=fzf-tmux:fzf
# export ENHANCD_DISABLE_DOT=1
# export ENHANCD_DISABLE_HOME=1
# export ENHANCD_HOOK_AFTER_CD="pwd; ls"
# export ENHANCD_HYPHEN_NUM=20

# fzf settings
export FZF_DEFAULT_OPTS="--height 40% --border --multi --ansi"
if type rg >& /dev/null; then
	# export FZF_DEFAULT_COMMAND="rg --files --follow 2>/dev/null"
	export FZF_DEFAULT_COMMAND="rg --files --no-messages"
	export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
	export FZF_ALT_C_COMMAND="${FZF_DEFAULT_COMMAND}"
elif type fd >& /dev/null; then
	export FZF_DEFAULT_COMMAND="fd --type f"
	export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
	export FZF_ALT_C_COMMAND="${FZF_DEFAULT_COMMAND}"
else
	echo "fzf is used with super-slow 'find' now because neither 'ripgrep' nor 'fd' is installed. Consider installing one of them."
	export FZF_DEFAULT_COMMAND="find * --type f"
	export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
	export FZF_ALT_C_COMMAND="${FZF_DEFAULT_COMMAND}"
fi

# Load Zplug
function zplug-check-combo() {
	zplug install
	zplug update
}
if [ -n "${ZPLUG_ROOT}" ]; then
  source $ZPLUG_ROOT/init.zsh
  zplug "zsh-users/zsh-completions"
  # autoload -Uz compinit && compinit
  zplug "zsh-users/zsh-autosuggestions", defer:2
  # enhances the terminal environment with 256 colors
	# export ZSH_256COLOR_DEBUG=1
  # zplug "chrissicool/zsh-256color", defer:2
  # コマンドを種類毎に色づけ
	# TODO: select plug-ins based on CPU performance
	if [[ $(_chksysspd) -le 5 ]]; then
		zplug "zsh-users/zsh-syntax-highlighting", defer:3
	else
		zplug "zdharma-continuum/fast-syntax-highlighting", defer:3
	fi
  # ヒストリの補完強化
  zplug "zsh-users/zsh-history-substring-search", defer:3
  # Gitの補完
  zplug "plugins/git",   from:oh-my-zsh, defer:3
  # Gitのブランチ名も補完
  #zplug "peterhurford/git-aliases.zsh", defer:3
  zplug "hmr/git-aliases.zsh", defer:3
  # Better line editor
  zplug "marlonrichert/zsh-edit"

  # Use with fzf
  ## Ctrl-Rで履歴検索、Ctrl-Tでファイル名検索補完できる
  zplug "junegunn/fzf", use:shell/key-bindings.zsh, use:shell/completion.zsh, defer:2
  ## cd **[TAB], vim **[TAB]などでファイル名を補完できる
  #zplug "junegunn/fzf", use:shell/completion.zsh
  ## fzf でよく使う関数の詰め合わせ
  #zplug "mollifier/anyframe"
  ## ディレクトリ移動を高速化（fzf であいまい検索）
  # zplug "b4b4r07/enhancd", use:init.sh, defer:2
  ## git のローカルリポジトリを一括管理（fzf でリポジトリへジャンプ）
  #zplug "motemen/ghq", as:command, from:gh-r

  #zplug "modules/prompt", from:prezto
  # Powerlevel 10000(Theme)
  zplug "romkatv/powerlevel10k", as:theme, depth:1

  # Install plugins if there are plugins that have not been installed
  echo "  In order to shorten the startup time, 'zplug check' won't be executed."
  echo "  Please run '${YELLOW}zplug-check-combo${NORMAL}' manually if necessary."
  # if ! zplug check --verbose; then
  #   # if ! zplug check; then
  #   printf "Install? [y/N]: "
  #   if read -q; then
  #     echo; zplug install
  #   fi
  # fi

  # Then, source plugins and add commands to $PATH
	# zplug load --verbose
	zplug load
  if [[ $? -eq 0 ]]; then
    echo "  zplug successfully loaded."
  else
    echo "  ${RED}zplug abnormally loaded.${NORMAL}"
  fi

  # To customize prompt, run `p10k configure` or edit ~/.config/zsh/p10k.zsh.
  [[ ! -f ~/.config/zsh/p10k.zsh ]] || source ~/.config/zsh/p10k.zsh
  echo

else
  # zplug not found
  echo "  ===== zplug not found. Consider installing it. ====="
fi

# Read GPProfiles settings
source "${ZDOTDIR:-${HOME}}/dot-zshrc_gpp" # gpprofile

# Zsh completion settings
source "${ZDOTDIR:-${HOME}}/dot-zshrc_zstyle"

# Spotify-cli settings
export LIBSPDIR="/Users/hmr/src/spotify-cli/lib/libspotify-cli"

# Help command(Alt+H)
autoload -Uz run-help
alias help=run-help

##### Keyboard and Keybinding
# Keyboard layout(US101, JP109, Mac-US, Mac-JIS, Keychron_K2_Mac, etc...)
KBDLAYOUT="Keychron_K2_Mac"

# Extra key config
if [[ ${DISPLAY:t} =~ ^org.xquartz:[0-9]+$ ]]; then
	ZKBDTYPE="${TERM}-${VENDOR}-${OSTYPE}-${KBDLAYOUT}"
else
	ZKBDTYPE="$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE-$KBDLAYOUT}"
fi

echo
if [ -r "${ZDOTDIR}/.zkbd/${ZKBDTYPE}" ]; then
	echo "Loading ${ZKBDTYPE}"
  source "${ZDOTDIR}/.zkbd/${ZKBDTYPE}"
else
  echo "Keyconfig file [${ZKBDTYPE}] not found.${NORMAL}"
	ZKBDTYPE="generic"
	source "${ZDOTDIR}/.zkbd/${ZKBDTYPE}" && echo "Loading ${ZKBDTYPE} instead."
fi

# set keybinding to emacs mode
bindkey -e
# zsh-history-substring-search(Up and Down key)
# bindkey '^[[A' history-substring-search-up
# bindkey '^[[B' history-substring-search-down
bindkey "${key[Up]}" history-substring-search-up
bindkey "${key[Down]}" history-substring-search-down

# Move by word
bindkey "${key[M-Left]}"  backward-subword     # Alt+Left
bindkey "${key[M-Right]}" forward-subword      # Alt+Right

# Backspace just one directory level
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
bindkey "^W" backward-kill-word

# Explicitly bind to "do-nothing" widget to prevent unnecessary characters from being entered
function _do-nothing-at-all() {
  # A widget which do nothing
	:
}
zle -N do-nothing _do-nothing-at-all
bindkey "${key[C-Left]}"    do-nothing
bindkey "${key[C-Up]}"      do-nothing
bindkey "${key[C-Down]}"    do-nothing
bindkey "${key[C-Right]}"   do-nothing
bindkey "${key[C-M-Left]}"  do-nothing
bindkey "${key[C-M-Up]}"    do-nothing
bindkey "${key[C-M-Down]}"  do-nothing
bindkey "${key[C-M-Right]}" do-nothing

# Example settings
# [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
# [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
# .zshrc

if [[ "$TERM_PROGRAM" == "vscode" ]]; then
	. "$(code --locate-shell-integration-path zsh)"
	echo "  ${GREEN3}VSCode shell integration enabled.${NORMAL}"
fi

## FPATH settings
# zsh completions by each homebrew package
if type brew >& /dev/null && [[ -d $(brew --prefix)/share/zsh-completions ]]; then
	fpath+=$(brew --prefix)/share/zsh-completions
	compinit -C
fi

# Show profiling result if enabled.
if (which zprof > /dev/null 2>&1) ;then
  zprof
fi


# To customize prompt, run `p10k configure` or edit ~/src/gpprofiles/settings/apps/zsh/dot-p10k.zsh.
[[ ! -f ~/src/gpprofiles/settings/apps/zsh/dot-p10k.zsh ]] || source ~/src/gpprofiles/settings/apps/zsh/dot-p10k.zsh
