# vim: ft=bash ts=2 sw=2 fenc=utf-8 ff=unix

# tmuxrc.gpp
# ORIGIN: 2020-12-02 by hmr

# Load byobu's library
# Simulate byobu main script
PKG=byobu
BYOBU_PREFIX="~/src/gpprofiles/settings/apps/tmux/byobu"
greadlink -f . >/dev/null 2>&1 && export BYOBU_READLINK="greadlink" || export BYOBU_READLINK="readlink"
export BYOBU_CHARMAP=$(locale charmap)
export BYOBU_BACKEND="tmux"
${BYOBU_TEST} tty >/dev/null 2>&1 && export BYOBU_TTY=$(tty) || export BYOBU_TTY=$(readlink /proc/$$/fd/0)


## This section is simulating the common script.
. "${BYOBU_PREFIX}/lib/${PKG}/include/common"
. "${BYOBU_PREFIX}/lib/${PKG}/include/shutil"
. "${BYOBU_PREFIX}/lib/${PKG}/include/constants"
get_distro || true
export BYOBU_DISTRO="$_RET"
BYOBU_INCLUDED_LIBS=1

## This section is simulating the main script.
[ -r "$BYOBU_CONFIG_DIR/statusrc" ] && . "$BYOBU_CONFIG_DIR/statusrc"
. $BYOBU_PREFIX/lib/$PKG/ip_address

## This section is simulating 'byobu-status' script
. "${BYOBU_PREFIX}/lib/${PKG}/include/icons"
for i in "${BYOBU_PREFIX}/share/$PKG/status/status" \
  "${BYOBU_PREFIX}/share/$PKG/status/statusrc" \
  "$BYOBU_CONFIG_DIR/status" \
  "$BYOBU_CONFIG_DIR/statusrc" \
  "$BYOBU_CONFIG_DIR/color" \
  "$BYOBU_CONFIG_DIR/color.tmux"
do
  [ -r "$i" ] && . "$i"
done
[ -r "$BYOBU_CONFIG_DIR/datetime.tmux" ] && . "$BYOBU_CONFIG_DIR/datetime.tmux"

# Get the current timestamp
get_now; NOW=${_RET}

get_status() {
  local cachepath="$BYOBU_RUN_DIR/status.$BYOBU_BACKEND/$1"
  local lastpath="$BYOBU_RUN_DIR/.last.$BYOBU_BACKEND/$1"
  local lastrun=0
  [ -r "$lastpath" ] && read lastrun < "$lastpath"
  case "$1" in
    ip_address4)
      local IPV6=0
      local function="ip_address"
      ;;
    ip_address6)
      local IPV6=1
      local function="ip_address"
      ;;
    *)
      local function="$1"
      ;;
  esac
  status_freq "$function"
  local expiry=$(($lastrun+$_RET))
  find_script "$function" && . "${_RET}"
  # Update cache now, if necessary
  if [ $NOW -ge $expiry ] || [ "$lastrun" = "0" ]; then
    "__$function" > "$cachepath".new
  fi
  # Check if we have data in the cache
  if [ -s "$cachepath".new ]; then
    # Looks like we have an updated cache, use it
    mv -f "$cachepath".new "$cachepath"
    printf "%s" "$NOW" > "$lastpath"
    IFS= read line < "$cachepath"; printf "%s" "$line"
  elif [ -s "$cachepath" ]; then
    # New cache is empty, but we have data from our last run, use it
    IFS= read line < "$cachepath"; printf "%s" "$line"
  fi
}

case "$1" in
  *left|*right)
    eval items="\$$1"
    for i in $items; do
      if [ "$BYOBU_BACKEND" = "tmux" ]; then
        case "$i" in
          \#date)
            if [ -n "$BYOBU_DATE" ]; then
              $BYOBU_SED_INLINE -e "/BYOBU_DATE=/d" "$BYOBU_CONFIG_DIR/datetime.tmux"
              printf "%s\n" 'BYOBU_DATE=' >> "$BYOBU_CONFIG_DIR/datetime.tmux"
              touch "$BYOBU_RUN_DIR/reload-required"
              continue
            fi
          ;;
          \#time)
            if [ -n "$BYOBU_TIME" ]; then
              $BYOBU_SED_INLINE -e "/BYOBU_TIME=/d" "$BYOBU_CONFIG_DIR/datetime.tmux"
              printf "%s\n" 'BYOBU_TIME=' >> "$BYOBU_CONFIG_DIR/datetime.tmux"
              touch "$BYOBU_RUN_DIR/reload-required"
              continue
            fi
          ;;
          date)
            if [ -z "$BYOBU_DATE" ]; then
              $BYOBU_SED_INLINE -e "/BYOBU_DATE=/d" "$BYOBU_CONFIG_DIR/datetime.tmux"
              printf "%s\n" 'BYOBU_DATE="%Y-%m-%d "' >> "$BYOBU_CONFIG_DIR/datetime.tmux"
              touch "$BYOBU_RUN_DIR/reload-required"
              continue
            fi
          ;;
          time)
            if [ -z "$BYOBU_TIME" ]; then
              $BYOBU_SED_INLINE -e "/BYOBU_TIME=/d" "$BYOBU_CONFIG_DIR/datetime.tmux"
              printf "%s\n" 'BYOBU_TIME="%H:%M:%S"' >> "$BYOBU_CONFIG_DIR/datetime.tmux"
              touch "$BYOBU_RUN_DIR/reload-required"
              continue
            fi
          ;;
        esac
      fi
      case "$i" in \#*) continue ;; esac
      get_status "$i"
    done
  ;;
  --detail)
    VER=
    if eval $BYOBU_TEST dpkg-query >/dev/null; then
      VER=$(set -- $(dpkg-query --show $PKG); printf "%s\n" "$2")
    fi
    printf "$PKG-$VER Detailed Status Navigation\n"
    if eval $BYOBU_TEST vim >/dev/null && `vim --version | grep -q +folding`; then
      printf "  Expand all - zr\t\tCollapse all - zm\n  Expand one - zo\t\tCollapse one - zc\n\n"
    fi
    for i in "$BYOBU_PREFIX/lib/$PKG"/*; do
      [ -f "$i" ] || continue
      i=${i##*/}
      case "$i" in
        include|menu|notify_osd|time_binary) continue ;;
      esac
      find_script "$i" && . "${_RET}"
      short=$(eval "__${i}" | $BYOBU_SED -e 's/^\s*//' -e 's/\s*$//' -e 's/.{[^}]*}//g')
      detail=$(eval "__${i}_detail" 2>/dev/null | $BYOBU_SED -e '/^$/d' -e 's/^/\t/g')
      printf "%s\n\t(%s)\n" "$short" "$i"
      [ -n "$detail" ] && printf "%s\n" "$detail"
    done
  ;;
  color)
    [ -z "$FOREGROUND" ] && FOREGROUND="w"
    [ -z "$BACKGROUND" ] && BACKGROUND="k"
    printf "$ESC{= $BACKGROUND$FOREGROUND}"
  ;;
esac

