# vim: ft=bash ts=2 sw=2 et fenc=utf-8 ff=unix

# dot-shell_rc_function
# ORIGIN: 2020-06-23 by hmr


echo "Processing dot-shell_rc_function"
echo -n "  Setting functions:"

# shows url for SPICE which is KVM's remote connection system
echo -n " spiceurl,"
function spiceurl {
  if [ x$1 = "x" ]; then return; fi
  echo spice://`hostname`:$(ps ax | grep $1 | grep -oP '\-spice port=\d+' | grep -oP '\d+')
}

# shows running VM and SPICE connection url
echo -n " spicelist,"
function spicelist {
  for VMNAME in `ps ax | grep qemu-system-x86_64 | grep -v grep | awk '{print $8}'`
  do
    echo `spiceurl $VMNAME` [$VMNAME]
  done
}

# shows system type
echo -n " _chksystem,"
function _chksystem {
  case "${OSTYPE}" in

    darwin* )
      echo "darwin"
      ;;

    linux* )
      echo "linux"
      ;;
  esac
}

# shows linux distribution type
echo -n " _chkdist,"
function _chkdist {
  local _TMP_DIST
  if   [ -e /etc/fedora-release ]; then _TMP_DIST="fedora"
  elif [ -e /etc/oracle-release ]; then _TMP_DIST="oracle"
  elif [ -e /etc/redhat-release ]; then _TMP_DIST="redhat"
  elif [ -e /etc/arch-release   ]; then _TMP_DIST="arch"
  elif [ -e /etc/SuSE-release   ]; then _TMP_DIST="suse"
  elif [ -e /etc/debian_version ]; then
    if [ -e /etc/lsb-release    ]; then _TMP_DIST="ubuntu"
                                   else _TMP_DIST="debian"
    fi
  else _TMP_DIST="unknown"
  fi

  echo ${_TMP_DIST}
}


# shows current shell(bash or zsh)
echo -n " chkshell,"
function chkshell {
  if [ -n "${ZSH_VERSION}" ]; then
    echo "zsh"
  elif [ -n ${BASH_VERSION} ]; then
    echo "bash"
  fi
#  if echo ${SHELL} | grep -qs bash; then
#    echo bash
#  elif echo ${SHELL} | grep -qs zsh; then
#    echo zsh
#  fi
}

echo -n " chkshell_internal,"
function chkshell_internal {
  chkshell
#  _PID=$$;
#  _PPID=$(ps -o ppid -p $_PID | tail -n 1);
#
#  if ps -p $_PPID | grep -qs bash ; then
#    echo "bash"
#  elif ps -p $_PPID | grep -qs zsh ; then
#    echo "zsh"
#  fi
}

# ESP32 development environment
echo -n " esp_idf,"
function esp_idf {
  if [ $# -eq 1 ]; then
    IDF_PATH=$1
  fi

  export IDF_PATH=${IDF_PATH:-${HOME}/esp/esp-idf}
  if [ -n "${IDF_PATH}" -a -d "${IDF_PATH}" ]; then
    echo "Setting ESP32 development environment."
    source ${IDF_PATH}/export.sh
  else
    echo "Error: IDF_PATH[${IDF_PATH}] doesn't exist."
  fi
}

# cd then ls
# function cd(){
#       builtin cd $@ && ls;
# }

# Git add
case "$(chkshell)" in
  bash | zsh )
    if type fzf >& /dev/null; then
      echo -n " gadd,"
      function gadd() {
        local selected
        if type unbuffer >& /dev/null; then
          selected=$(unbuffer git status -s | fzf -m --ansi | awk '{print $2}')
        else
          selected=$(git status -s | fzf -m --ansi | awk '{print $2}')
        fi
        if [[ -n "$selected" ]]; then
          # Convert CR/LF to space
          git add $(sed -e ':L;N;$!bL;s/\n/ /g' <<< "$selected")
        fi
      }
    else
      echo
      echo "  fzf isn't installed. gadd() isn't enabled."
    fi
    ;;
esac

# System update combo
echo -n " ubuntu-update"
function ubuntu-update() {
  echo "${MAGENTA}===== Updating system =====${DEFAULT}"
  sudo apt update \
    && apt list --upgradable \
    && echo -n "${YELLOW}==================== HIT ENTER TO PROCEED ====================${DEFAULT}" \
    && read \
    && sudo apt upgrade -y \
    && sudo apt autoremove -y

  echo "${CYAN}===== Update done =====${DEFAULT}"
  echo

  echo "${MAGENTA}===== Saving package list =====${DEFAULT}"
  [ -d "${XDG_CONFIG_HOME}/apt" ] || mkdir -p "${XDG_CONFIG_HOME}/apt"
  FILENAME="$XDG_CONFIG_HOME/apt/installed-packages_$(hostname -s)_$(date +'%s').txt.gz"
  LANG=C apt list --installed 2> /dev/null | gzip -c > ${FILENAME}
  echo "Saved as ${FILENAME}"
  /bin/ls -t $XDG_CONFIG_HOME/apt/installed-* | tail -n +11 | xargs rm -f
  echo "${CYAN}===== Saving done =====${DEFAULT}"
  echo

  if [ -e /var/run/reboot-required.pkgs ]; then
    echo "${BOLD}${RED}*** Reboot required due to these package(s):${DEFAULT}"
    cat /var/run/reboot-required.pkgs
  else
    echo "No need to reboot."
  fi
}

echo
