"-----------------------------------------------------------------------------
" Settings for vim Pltg
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'bronson/vim-trailing-whitespace'
Plug 'altercation/vim-colors-solarized'
Plug 'airblade/vim-gitgutter'
call plug#end()

"----------------------------------------------------------------------------
" Misc settings
" see more settings at: http://www.geek.sc/archives/977
syntax on
scriptencoding utf-8
set encoding=utf-8
set fileencodings=ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932,utf-8
"set fileencodings=utf-8
set fileformats=unix,dos,mac

set nocompatible	" Use Vim defaults (much better!)
set bs=indent,eol,start		" allow backspacing over everything in insert mode
"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
"set ruler		" show the cursor position all the time
set tabstop=4
set expandtab

set cursorline
set number
set laststatus=2
" set statusline=%F%r%h%=
" set statusline=%F%m%r%h%w\%=[TYPE=%Y]\[FORMAT=%{&ff}]\[ENC=%{&fileencoding}]\[LOW=%l/%L]
"set statusline=%F%m%r%h%w\ \ \ \ %y\ lines:%L\%=(%l,%v)\ [%{&fileencoding}][%{&ff}][%B]
set statusline=%F%m%r%h%w\ \ \ \ %y\ lines:%L\%=(%l,%v)\ [%{&fileencoding}][%{&ff}]
set incsearch
set ignorecase
set showmatch
set showmode
set title
set nowritebackup
set nobackup
set virtualedit=block
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start
set ambiwidth=double
set wildmenu
set noerrorbells
set novisualbell
set visualbell t_vb=
set showbreak=↪
set list
set listchars=tab:»\ ,eol:↲,space:␣,trail:･,extends:⟩,precedes:⟨
set hlsearch
set hidden
set noswapfile
"vimにコピペしたとき、コメントアウトや余計な改行をさせない
set paste

"-----------------------------------------------------------------------------
" Color
"colorscheme default
colorscheme molokai

" Try to use Solarized
"try
"	set background=dark
"	colorscheme solarized
"catch
"endtry

if (exists('+colorcolumn'))
  set colorcolumn=100
  highlight ColorColumn ctermbg=9
endif
"-----------------------------------------------------------------------------
" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
  set csprg=/usr/bin/cscope
  set csto=0
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
    cs add cscope.out
    " else add database pointed to by environment
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
  set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

filetype plugin on

if &term=="xterm"
  set t_Co=8
  set t_Sb=[4%dm
  set t_Sf=[3%dm
endif

if &term=="xterm-256color"
  set t_Co=256
  set t_Sb=^[[4%dm
  set t_Sf=^[[3%dm
endif


" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

" Enable/Disable line number by Ctrl-M
" https://qiita.com/smison/items/f392037f1164eba5cc74
function ToggleNumber()
  if &number
    setlocal nonumber
  else
    setlocal number
  endif
endfunction

function ToggleHighlight()
  if &hlsearch
    setlocal nohlsearch
  else
    setlocal hlsearch
  endif
endfunction

function ToggleList()
  if &list
    setlocal nolist
  else
    setlocal list
  endif
endfunction

" nnoremap <silent> <C-m> :call Setnumber()<CR>
nmap <C-n> :call ToggleNumber()<CR>

" Clear hlsearch by Ctrl-L
" http://d.hatena.ne.jp/h1mesuke/20080327/p1
nmap <C-h> :call ToggleHighlight()<CR>

nmap <C-l> :call ToggleList()<CR>
