" vim:ft=vim:ts=4:noexpandtab:fenc=utf-8:ff=unix
scriptencoding utf-8
"-----------------------------------------------------------------------------
" vim Plugの設定
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
" 以下にインストールするプラグインを記述する
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'bronson/vim-trailing-whitespace'
Plug 'altercation/vim-colors-solarized'
Plug 'airblade/vim-gitgutter'
call plug#end()

"----------------------------------------------------------------------------
" Misc settings
" see more settings at: http://www.geek.sc/archives/977
" filetype plugin on
filetype plugin indent on	" ファイルタイプ検出プラグインと自動インデントを使う
syntax on					" シンタックスハイライトを使う
set encoding=utf-8			" Set utf-8 as default encoding.
set fileencodings=utf-8,euc-jp,sjis,cp932,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213,ucs-bom
set fileformats=unix,dos,mac

" Vimの拡張を使う(あたりまえ!!)
set nocompatible

set bs=indent,eol,start		" allow backspacing over everything in insert mode
set ai						" always set autoindenting on
set viminfo='20,\"50		" read/write a .viminfo file, don't store more than 50 lines of registers
set noswapfile				" not to make swap file.
set nowritebackup			" not to make backup file.
set nobackup				" not to backup
"set backup					" keep a backup file

set history=50				" keep 50 lines of command line history
set tabstop=4				" タブ幅
"set expandtab				" タブを空白に展開する

set cursorline				" カーソル行表示
set number					" 行番号表示
"set ruler					" show the cursor position all the time
set laststatus=2			" ステータスラインの位置(下から2行目)
" set statusline=%F%r%h%=
" set statusline=%F%m%r%h%w\%=[TYPE=%Y]\[FORMAT=%{&ff}]\[ENC=%{&fileencoding}]\[LOW=%l/%L]
"set statusline=%F%m%r%h%w\ \ \ \ %y\ lines:%L\%=(%l,%v)\ [%{&fileencoding}][%{&ff}][%B]
set statusline=%F%m%r%h%w\ \ \ \ %y\ lines:%L\%=(%l,%v)\ [%{&fileencoding}][%{&ff}]

set nohlsearch				" 検索にマッチした部分をハイライト表示しない
set incsearch				" インクリメンタルサーチ使用
set ignorecase				" 大文字小文字の違いを無視
set showmatch				" マッチした部分を強調
set showmode				" 現在のモードを表示

set title					" allow vim change terminal's title
set virtualedit=block		" 矩形バーチャルモードで文字の有無を無視する
set whichwrap=b,s,[,],<,>	" 行末を越えて次行に移動可能にする
set ambiwidth=double		" 全角文字を上手く扱うためのおまじない
set wildmenu				" ファイル名補完メニューを使う
set wildmode=longest,full	" ファイル名補完機能
set noerrorbells			" エラー時にベルを鳴らさない
set novisualbell			" ビジュアルベルを使わない
set visualbell t_vb=		" ビジュアルベルは空白(何もしない)

set list					" 空白文字等を表示
"set listchars=tab:»\ ,eol:↲,space:␣,trail:･,extends:⟩,precedes:⟨
set listchars=tab:»\ ,eol:↲,trail:･,extends:⟩,precedes:⟨
set showbreak=↪				" 折り返し記号

set hidden
set paste					" vimにコピペしたとき、コメントアウトや余計な改行をさせない

" 正規表現メタ文字のエスケープシーケンスを不要にする(very magic)
nnoremap /  /\v
"-----------------------------------------------------------------------------
"色の設定
"colorscheme default
colorscheme molokai

" Try to use Solarized
"try
"	set background=dark
"	colorscheme solarized
"catch
"endtry

if (exists('+colorcolumn'))
  set colorcolumn=100
  highlight ColorColumn ctermbg=9
endif
"-----------------------------------------------------------------------------
"Only do this part when compiled with support for autocommands
if has("autocmd")
	augroup redhat
		autocmd!
		" In text files, always limit the width of text to 78 characters
		autocmd BufRead *.txt set tw=78

		" When editing a file, always jump to the last cursor position
		autocmd BufReadPost *
			\ if line("'\"") > 0 && line ("'\"") <= line("$") |
			\     exe "normal! g'\"" |
			\ endif

		" don't write swapfile on most commonly used directories for NFS mounts or USB sticks
		autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp

		" start with spec file template
		autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
		augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
endif

"-----------------------------------------------------------------------------
"Switch syntax highlighting on, when the terminal has colors
"Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch
endif

if &term=="xterm"
	set t_Co=8
	set t_Sb=[4%dm
	set t_Sf=[3%dm
endif

if &term=="xterm-256color"
	set t_Co=256
	set t_Sb=^[[4%dm
	set t_Sf=^[[3%dm
endif


"Don't wake up system with blinking cursor:
"http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

"https://qiita.com/smison/items/f392037f1164eba5cc74
function ToggleNumber()
	if &number
		setlocal nonumber
	else
		setlocal number
	endif
endfunctio

function ToggleHighlight()
	if &hlsearch
		setlocal nohlsearch
	else
		setlocal hlsearch
	endif
endfunction

function ToggleList()
	if &list
		setlocal nolist
	else
		setlocal list
	endif
endfunction

"行番号表示On/Off(Ctrl-N)
nmap <C-n> :call ToggleNumber()<CR>
"検索ハイライトOn/Off(Ctrl-H)
"http://d.hatena.ne.jp/h1mesuke/20080327/p1
nmap <C-h> :call ToggleHighlight()<CR>
"空白文字表示On/Off(Ctrl-L)
nmap <C-l> :call ToggleList()<CR>
nmap <C-g> :call gitgutter#toggle()<CR>

